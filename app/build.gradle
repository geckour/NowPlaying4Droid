apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'io.fabric'

kotlin.experimental.coroutines 'enable'

kapt.mapDiagnosticLocations = true

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.geckour.nowplaying4gpm"
        minSdkVersion 24
        versionCode 54
        versionName "2.4.7"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        dataBinding.enabled = true

        def filesAuthorityValue = applicationId + ".files"
        manifestPlaceholders = [filesAuthority: filesAuthorityValue]
        buildConfigField "String", "FILES_AUTHORITY", "\"${filesAuthorityValue}\""
    }

    applicationVariants.all {
        def keyNameLastFm = "LAST_FM_API_KEY"
        it.buildConfigField "String", keyNameLastFm, getKey(keyNameLastFm)
        def keyNameTwitterConsumerKey = "TWITTER_CONSUMER_KEY"
        it.buildConfigField "String", keyNameTwitterConsumerKey, getKey(keyNameTwitterConsumerKey)
        def keyNameTwitterConsumerSecret = "TWITTER_CONSUMER_SECRET"
        it.buildConfigField "String", keyNameTwitterConsumerSecret, getKey(keyNameTwitterConsumerSecret)
        def keyNameSkuDonate = "SKU_KEY_DONATE"
        it.buildConfigField "String", keyNameSkuDonate, getKey(keyNameSkuDonate)
        def keyNameMastodonInstancesSecret = "MASTODON_INSTANCES_SECRET"
        it.buildConfigField "String", keyNameMastodonInstancesSecret, getKey(keyNameMastodonInstancesSecret)
    }

    signingConfigs {
        debug {
            keyAlias 'AndroidDebugKey'
            keyPassword 'android'
            storeFile file("${project.rootDir}/app/signing/debug.keystore")
            storePassword 'android'
        }
        release {
            def releaseSettingGradleFile = new File("${project.rootDir}/app/signing/release.gradle")
            if (releaseSettingGradleFile.exists()) {
                apply from: releaseSettingGradleFile, to: android
            } else {
                throw new GradleException("Missing ${releaseSettingGradleFile.getAbsolutePath()} . Generate the file by copying and modifying ${project.rootDir}/app/signing/release.gradle.sample .")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    dataBinding.enabled = true
}

static def getKey(keyName) {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secret.properties')))
    return '"' + props[keyName] + '"'
}

dependencies {
    def android_support_version = '1.0.0'
    def coroutines_version = '0.30.0'
    def stetho_version = '1.5.0'
    def permission_dispatcher_version = '3.3.1'
    def retrofit2_version = '2.4.0'
    def okhttp_version = '3.11.0'
    def glide_version = '4.8.0'
    def firebase_version = '16.0.4'

    wearApp project(':wear')

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.google.android.material:material:$android_support_version"
    implementation "androidx.appcompat:appcompat:$android_support_version"
    implementation "androidx.legacy:legacy-support-v4:$android_support_version"
    implementation "androidx.legacy:legacy-support-v13:$android_support_version"
    implementation "androidx.recyclerview:recyclerview:$android_support_version"
    implementation "androidx.browser:browser:$android_support_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    implementation "com.google.firebase:firebase-core:$firebase_version"
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.3') { transitive = true }
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Logging
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Inspect
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"

    // Permission
    implementation "com.github.hotchemi:permissionsdispatcher:$permission_dispatcher_version"
    kapt "com.github.hotchemi:permissionsdispatcher-processor:$permission_dispatcher_version"

    // Palette API
    implementation "androidx.palette:palette:$android_support_version"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-experimental-adapter:1.0.0'

    // Image processing
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Wear
    implementation 'com.google.android.gms:play-services-wearable:16.0.1'
    implementation 'org.twitter4j:twitter4j-core:4.0.7'

    // Mastodon
    implementation 'com.github.sys1yagi.mastodon4j:mastodon4j:1.7.0'
}

// Billing
apply plugin: 'com.google.gms.google-services'