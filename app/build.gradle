apply plugin: "com.android.application"

apply plugin: "kotlin-android"

apply plugin: "kotlin-android-extensions"

apply plugin: "kotlin-kapt"

apply plugin: "io.fabric"

kapt.mapDiagnosticLocations = true

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.geckour.nowplaying4gpm"
        minSdkVersion 24
        versionCode 86
        versionName "2.8.7"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        dataBinding.enabled = true

        def filesAuthorityValue = applicationId + ".files"
        manifestPlaceholders = [filesAuthority: filesAuthorityValue]
        buildConfigField "String", "FILES_AUTHORITY", "\"${filesAuthorityValue}\""
    }

    applicationVariants.all {
        def keyNameLastFm = "LAST_FM_API_KEY"
        it.buildConfigField "String", keyNameLastFm, getKey(keyNameLastFm)
        def keyNameTwitterConsumerKey = "TWITTER_CONSUMER_KEY"
        it.buildConfigField "String", keyNameTwitterConsumerKey, getKey(keyNameTwitterConsumerKey)
        def keyNameTwitterConsumerSecret = "TWITTER_CONSUMER_SECRET"
        it.buildConfigField "String", keyNameTwitterConsumerSecret, getKey(keyNameTwitterConsumerSecret)
        def keyNameSkuDonate = "SKU_KEY_DONATE"
        it.buildConfigField "String", keyNameSkuDonate, getKey(keyNameSkuDonate)
        def keyNameMastodonInstancesSecret = "MASTODON_INSTANCES_SECRET"
        it.buildConfigField "String", keyNameMastodonInstancesSecret, getKey(keyNameMastodonInstancesSecret)
        def keyNameSpotifyClientId = "SPOTIFY_CLIENT_ID"
        it.buildConfigField "String", keyNameSpotifyClientId, getKey(keyNameSpotifyClientId)
        def keyNameSpotifyClientSecret = "SPOTIFY_CLIENT_SECRET"
        it.buildConfigField "String", keyNameSpotifyClientSecret, getKey(keyNameSpotifyClientSecret)
    }

    signingConfigs {
        debug {
            keyAlias "AndroidDebugKey"
            keyPassword "android"
            storeFile file("${project.rootDir}/app/signing/debug.keystore")
            storePassword "android"
        }
        release {
            def releaseSettingGradleFile = new File("${project.rootDir}/app/signing/release.gradle")
            if (releaseSettingGradleFile.exists()) {
                apply from: releaseSettingGradleFile, to: android
            } else {
                throw new GradleException("Missing ${releaseSettingGradleFile.getAbsolutePath()} . Generate the file by copying and modifying ${project.rootDir}/app/signing/release.gradle.sample .")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }

    dataBinding.enabled = true
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

static def getKey(keyName) {
    Properties props = new Properties()
    props.load(new FileInputStream(new File("secret.properties")))
    return "\"" + props[keyName] + "\""
}

dependencies {
    def coroutines_version = "1.3.2"
    def stetho_version = "1.5.1"
    def moshi_version = "1.8.0"
    def firebase_version = "16.0.4"
    def preference_version = "1.1.0"
    def lifecycle_version = "2.2.0-rc02"
    def permission_dispatcher_version = "4.5.0"
    def retrofit2_version = "2.6.1"
    def okhttp_version = "3.11.0"
    def glide_version = "4.9.0"
    def mockk_version = "1.9.1"

    wearApp project(":wear")

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.google.android.material:material:1.2.0-alpha01"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.legacy:legacy-support-v13:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation "androidx.browser:browser:1.0.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-beta3"
    implementation("com.google.firebase:firebase-core:$firebase_version") {
        exclude group: "com.google.android.gms", module: "play-services-basement"
    }
    implementation("com.crashlytics.sdk.android:crashlytics:2.9.3") { transitive = true }
    testImplementation "junit:junit:4.12"
    testImplementation "androidx.test:runner:1.3.0-alpha02"
    testImplementation "androidx.test.ext:junit:1.1.1"
    testImplementation "org.robolectric:robolectric:4.3"
    testImplementation "org.assertj:assertj-core:3.10.0"
    testImplementation "io.mockk:mockk:$mockk_version"
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Logging
    implementation "com.jakewharton.timber:timber:4.7.1"

    // Inspect
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"

    // KTX
    implementation "androidx.core:core-ktx:1.1.0"
    implementation 'androidx.fragment:fragment-ktx:1.2.0-rc02'
    implementation 'androidx.activity:activity-ktx:1.1.0-rc02'

    // JSON
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // Permission
    implementation "org.permissionsdispatcher:permissionsdispatcher:$permission_dispatcher_version"
    kapt "org.permissionsdispatcher:permissionsdispatcher-processor:$permission_dispatcher_version"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Preference
    implementation "androidx.preference:preference-ktx:$preference_version"

    // Palette API
    implementation "androidx.palette:palette:1.0.0"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit2_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2"

    // Image processing
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Wear
    implementation "com.google.android.gms:play-services-wearable:17.0.0"
    implementation "org.twitter4j:twitter4j-core:4.0.7"

    // Mastodon
    implementation "com.github.sys1yagi.mastodon4j:mastodon4j:1.7.0"
}

// Billing
apply plugin: "com.google.gms.google-services"